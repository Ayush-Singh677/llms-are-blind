{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"from transformers import AutoProcessor, PaliGemmaForConditionalGeneration\nimport google.generativeai as genai\nimport torch\nfrom datasets import load_dataset\nfrom huggingface_hub import login\nfrom tqdm import tqdm\nimport os\nfrom PIL import Image\nimport requests\nimport time\nimport re","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"os.environ[\"GOOGLE_API_KEY\"]=\"YOUR_API_KEY\"\ngenai.configure(api_key=os.environ[\"GOOGLE_API_KEY\"])","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.859414Z","iopub.status.idle":"2024-08-24T22:56:57.859802Z","shell.execute_reply.started":"2024-08-24T22:56:57.859593Z","shell.execute_reply":"2024-08-24T22:56:57.859608Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"login(\"YOUR_API_KEY\")","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.860693Z","iopub.status.idle":"2024-08-24T22:56:57.861018Z","shell.execute_reply.started":"2024-08-24T22:56:57.860858Z","shell.execute_reply":"2024-08-24T22:56:57.860872Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ds = load_dataset(\"Ayush-Singh/llms-are-blind-captions_florence2-large\")\nds","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.862613Z","iopub.status.idle":"2024-08-24T22:56:57.862971Z","shell.execute_reply.started":"2024-08-24T22:56:57.862812Z","shell.execute_reply":"2024-08-24T22:56:57.862827Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_qa = genai.GenerativeModel(model_name=\"gemini-1.5-flash\")","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.864261Z","iopub.status.idle":"2024-08-24T22:56:57.864764Z","shell.execute_reply.started":"2024-08-24T22:56:57.864432Z","shell.execute_reply":"2024-08-24T22:56:57.864446Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model_id = \"google/paligemma-3b-mix-448\"\nmodel = PaliGemmaForConditionalGeneration.from_pretrained(model_id).cuda().eval()\nprocessor = AutoProcessor.from_pretrained(model_id)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.866417Z","iopub.status.idle":"2024-08-24T22:56:57.866809Z","shell.execute_reply.started":"2024-08-24T22:56:57.866606Z","shell.execute_reply":"2024-08-24T22:56:57.866622Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_accuracy(l1,l2):\n    count = 0\n    for x,y in zip(l1,l2):\n        if x==y:\n            count+=1\n    return count/len(l1)*100","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.869060Z","iopub.status.idle":"2024-08-24T22:56:57.869704Z","shell.execute_reply.started":"2024-08-24T22:56:57.869464Z","shell.execute_reply":"2024-08-24T22:56:57.869487Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def generate(model,model_qa,processor,dataset,prompt):\n    token_count = 0\n    results = []\n    for smaple in tqdm(dataset):\n        \n        if token_count%15==0 and token_count!=0:\n            time.sleep(60)\n            \n        image = sample['image']\n        \n        model_inputs = processor(text=prompt, images=image, return_tensors=\"pt\").to(model.device)\n        input_len = model_inputs[\"input_ids\"].shape[-1]\n        \n        decoded = \"\"\n        with torch.inference_mode():\n            generation = model.generate(**model_inputs, max_new_tokens=1024, do_sample=False)\n            generation = generation[0][input_len:]\n            decoded = processor.decode(generation, skip_special_tokens=True)\n            \n        prompt = \"From the description of the image answer the question strictly in the asked format.\" + \\\n                 \"Description :\" + decoded + \\\n                 \"Question : \" + sample['prompt']\n        \n        response = model_qa.generate_content(prompt)       \n        response = response.text\n        results.append(response)\n        token_count+=1\n        \n        return results\n","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.870789Z","iopub.status.idle":"2024-08-24T22:56:57.871120Z","shell.execute_reply.started":"2024-08-24T22:56:57.870963Z","shell.execute_reply":"2024-08-24T22:56:57.870977Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### **Counting** - Counting Circles","metadata":{}},{"cell_type":"code","source":"Sample_Olympic_Counting_Circles = ds['Olympic_Counting_Circles'].select(range(200))\nSample_Olympic_Counting_Circles","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.872457Z","iopub.status.idle":"2024-08-24T22:56:57.872810Z","shell.execute_reply.started":"2024-08-24T22:56:57.872622Z","shell.execute_reply":"2024-08-24T22:56:57.872635Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"caption on the geometry of number of circles in the image en\"\nresults_occ = generate(model,model_qa,processor,Sample_Olympic_Counting_Circles,prompt)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.873968Z","iopub.status.idle":"2024-08-24T22:56:57.874288Z","shell.execute_reply.started":"2024-08-24T22:56:57.874132Z","shell.execute_reply":"2024-08-24T22:56:57.874146Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results_occ = [re.findall(r'\\d+', item)[0] for item in results_occ]\nprint(results_occ)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.875969Z","iopub.status.idle":"2024-08-24T22:56:57.876298Z","shell.execute_reply.started":"2024-08-24T22:56:57.876139Z","shell.execute_reply":"2024-08-24T22:56:57.876153Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Accuracy is : \", get_accuracy(results_occ,Sample_Olympic_Counting_Circles['groundtruth']))","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.877320Z","iopub.status.idle":"2024-08-24T22:56:57.877644Z","shell.execute_reply.started":"2024-08-24T22:56:57.877481Z","shell.execute_reply":"2024-08-24T22:56:57.877494Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### **Counting** - Nested Squares","metadata":{}},{"cell_type":"code","source":"Sample_Nested_Squares = ds['Nested_Squares'].select(range(200))\nSample_Nested_Squares","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.878794Z","iopub.status.idle":"2024-08-24T22:56:57.879112Z","shell.execute_reply.started":"2024-08-24T22:56:57.878956Z","shell.execute_reply":"2024-08-24T22:56:57.878970Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"describe on the count and geometry of squares in the image \"\nresults_ns = generate(model,model_qa,processor,Sample_Nested_Squares,prompt)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.880259Z","iopub.status.idle":"2024-08-24T22:56:57.880570Z","shell.execute_reply.started":"2024-08-24T22:56:57.880415Z","shell.execute_reply":"2024-08-24T22:56:57.880428Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results_ns = [re.findall(r'\\d+', item)[0] for item in results_ns]\nprint(results_ns)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.881667Z","iopub.status.idle":"2024-08-24T22:56:57.882011Z","shell.execute_reply.started":"2024-08-24T22:56:57.881843Z","shell.execute_reply":"2024-08-24T22:56:57.881862Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Accuracy is : \", get_accuracy(results_ns,Sample_Nested_Squares['groundtruth']))","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.883580Z","iopub.status.idle":"2024-08-24T22:56:57.883945Z","shell.execute_reply.started":"2024-08-24T22:56:57.883783Z","shell.execute_reply":"2024-08-24T22:56:57.883797Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### **Counting** - Line Plot Intersections","metadata":{}},{"cell_type":"code","source":"Sample_Line_Plot_Intersections = ds['Line_Plot_Intersections'].select(range(200))\nSample_Line_Plot_Intersections","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.885024Z","iopub.status.idle":"2024-08-24T22:56:57.885326Z","shell.execute_reply.started":"2024-08-24T22:56:57.885176Z","shell.execute_reply":"2024-08-24T22:56:57.885189Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"describe the geometry of intersection of blue and red line in image\"\nresults_lpi = generate(model,model_qa,processor,Sample_Line_Plot_Intersections,prompt)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.887251Z","iopub.status.idle":"2024-08-24T22:56:57.887604Z","shell.execute_reply.started":"2024-08-24T22:56:57.887432Z","shell.execute_reply":"2024-08-24T22:56:57.887448Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results_lpi = [re.findall(r'\\d+', item)[0] for item in results_lpi]\nprint(results_lpi)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.888635Z","iopub.status.idle":"2024-08-24T22:56:57.888983Z","shell.execute_reply.started":"2024-08-24T22:56:57.888825Z","shell.execute_reply":"2024-08-24T22:56:57.888839Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Accuracy is : \", get_accuracy(results_lpi,Sample_Line_Plot_Intersections['groundtruth']))","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.892245Z","iopub.status.idle":"2024-08-24T22:56:57.892586Z","shell.execute_reply.started":"2024-08-24T22:56:57.892427Z","shell.execute_reply":"2024-08-24T22:56:57.892441Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### **Counting** - Subway Connections","metadata":{}},{"cell_type":"code","source":"Sample_Subway_Connections = ds['Subway_Connections'].select(range(200))\nSample_Subway_Connections","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.893804Z","iopub.status.idle":"2024-08-24T22:56:57.894127Z","shell.execute_reply.started":"2024-08-24T22:56:57.893971Z","shell.execute_reply":"2024-08-24T22:56:57.893985Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"prompt : describe in detail on path connecting differnt stations in the image en\" \nresults_sc = generate(model,model_qa,processor,Sample_Subway_Connections,prompt)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.895199Z","iopub.status.idle":"2024-08-24T22:56:57.895515Z","shell.execute_reply.started":"2024-08-24T22:56:57.895360Z","shell.execute_reply":"2024-08-24T22:56:57.895377Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results_sc = [re.findall(r'\\d+', item)[0] if re.findall(r'\\d+', item) else -1 for item in results_sc]\nprint(results_sc)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.897461Z","iopub.status.idle":"2024-08-24T22:56:57.897852Z","shell.execute_reply.started":"2024-08-24T22:56:57.897645Z","shell.execute_reply":"2024-08-24T22:56:57.897681Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Accuracy is : \", get_accuracy(results_sc,Sample_Subway_Connections['groundtruth']))","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.898845Z","iopub.status.idle":"2024-08-24T22:56:57.899169Z","shell.execute_reply.started":"2024-08-24T22:56:57.899010Z","shell.execute_reply":"2024-08-24T22:56:57.899024Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### **Counting** - Blank Grids","metadata":{}},{"cell_type":"code","source":"Sample_Counting_Grid_Blank_Grids = ds['Counting_Grid_Blank_Grids'].select(range(200))\nSample_Counting_Grid_Blank_Grids","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.913851Z","iopub.status.idle":"2024-08-24T22:56:57.914171Z","shell.execute_reply.started":"2024-08-24T22:56:57.914012Z","shell.execute_reply":"2024-08-24T22:56:57.914026Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"describe the count rows and columns in table correctly \"\nresults_cg = generate(model,model_qa,processor,Sample_Counting_Grid_Blank_Grids,prompt) ","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results_cg = [re.search(r'\\{([^}]*)\\}', item).group(1) if re.search(r'\\{([^}]*)\\}', item) else \"NA\" for item in results_cg]\nprint(results_cg)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Accuracy is : \", get_accuracy(results_cg,Sample_Counting_Grid_Blank_Grids['groundtruth']))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### **Geometry** - Are Lines Intersecting","metadata":{}},{"cell_type":"code","source":"Sample_Lines = ds['Line_Plot_Intersections'].select(range(200))\nSample_Lines","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.900115Z","iopub.status.idle":"2024-08-24T22:56:57.900407Z","shell.execute_reply.started":"2024-08-24T22:56:57.900260Z","shell.execute_reply":"2024-08-24T22:56:57.900272Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"describe the geometry of intersection of blue and red line in image \"\nresults_l = generate(model,model_qa,processor,Sample_Lines,prompt)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.901612Z","iopub.status.idle":"2024-08-24T22:56:57.902058Z","shell.execute_reply.started":"2024-08-24T22:56:57.901858Z","shell.execute_reply":"2024-08-24T22:56:57.901879Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results_l = [re.search(r'\\{(Yes|No)\\}', item).group(1) if re.search(r'\\{(Yes|No)\\}', item) else NA for item in results_l]\nprint(results_l)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.903577Z","iopub.status.idle":"2024-08-24T22:56:57.904207Z","shell.execute_reply.started":"2024-08-24T22:56:57.904016Z","shell.execute_reply":"2024-08-24T22:56:57.904033Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"count = 0\nfor x,y in zip(results_l,Sample_Lines['groundtruth']):\n    if (x=='Yes' and y!='0') or (x=='No' and y==0):\n        count+=1\nprint(\"Accuracy is \", count/len(results_l)*100)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.905146Z","iopub.status.idle":"2024-08-24T22:56:57.905459Z","shell.execute_reply.started":"2024-08-24T22:56:57.905307Z","shell.execute_reply":"2024-08-24T22:56:57.905320Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### **Geometry** - Touching Circles","metadata":{}},{"cell_type":"code","source":"Sample_Touching_Circles = ds['Touching_Circles'].select(range(200))\nSample_Touching_Circles","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.907011Z","iopub.status.idle":"2024-08-24T22:56:57.907369Z","shell.execute_reply.started":"2024-08-24T22:56:57.907203Z","shell.execute_reply":"2024-08-24T22:56:57.907218Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"caption on the geometry of two circles in the image en\"\nresults_tc = generate(model,model_qa,processor,Sample_Touching_Circles,prompt)    ","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.908612Z","iopub.status.idle":"2024-08-24T22:56:57.909055Z","shell.execute_reply.started":"2024-08-24T22:56:57.908836Z","shell.execute_reply":"2024-08-24T22:56:57.908856Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results_tc = [re.search(r'\\{(Yes|No)\\}', item).group(1) if re.search(r'\\{(Yes|No)\\}', item) else NA for item in results_tc]\nprint(results_tc)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.910758Z","iopub.status.idle":"2024-08-24T22:56:57.911188Z","shell.execute_reply.started":"2024-08-24T22:56:57.910963Z","shell.execute_reply":"2024-08-24T22:56:57.910982Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Accuracy is : \", get_accuracy(results_tc,Sample_Touching_Circles['groundtruth']))","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.912553Z","iopub.status.idle":"2024-08-24T22:56:57.912911Z","shell.execute_reply.started":"2024-08-24T22:56:57.912748Z","shell.execute_reply":"2024-08-24T22:56:57.912763Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### ","metadata":{}},{"cell_type":"markdown","source":"### **Geometry** - Circled Letters","metadata":{}},{"cell_type":"code","source":"Sample_Circled_Letter = ds['Circled_Letter'].select(range(200))\nSample_Circled_Letter","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.915225Z","iopub.status.idle":"2024-08-24T22:56:57.915605Z","shell.execute_reply.started":"2024-08-24T22:56:57.915429Z","shell.execute_reply":"2024-08-24T22:56:57.915444Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"caption on what is the letter within the red oval in the text in the image \"\nresults_cl = generate(model,model_qa,processor,Sample_Circled_Letter,prompt)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.916819Z","iopub.status.idle":"2024-08-24T22:56:57.917156Z","shell.execute_reply.started":"2024-08-24T22:56:57.916992Z","shell.execute_reply":"2024-08-24T22:56:57.917007Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"extracted_chars = [re.sub(r'\\s+', '', item) for item in results_cl]","metadata":{"execution":{"iopub.status.busy":"2024-08-24T22:56:57.918246Z","iopub.status.idle":"2024-08-24T22:56:57.918583Z","shell.execute_reply.started":"2024-08-24T22:56:57.918401Z","shell.execute_reply":"2024-08-24T22:56:57.918414Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Accuracy is : \", get_accuracy(extracted_chars,Sample_Circled_Letter['groundtruth']))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### ","metadata":{}}]}
