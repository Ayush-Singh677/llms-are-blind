{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install openai","metadata":{"execution":{"iopub.status.busy":"2024-08-22T11:21:19.552250Z","iopub.execute_input":"2024-08-22T11:21:19.552651Z","iopub.status.idle":"2024-08-22T11:21:52.567846Z","shell.execute_reply.started":"2024-08-22T11:21:19.552619Z","shell.execute_reply":"2024-08-22T11:21:52.566447Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from datasets import load_dataset\nimport base64\nfrom pathlib import Path\nimport base64\nfrom io import BytesIO\nfrom PIL import Image\nimport os\nfrom openai import OpenAI\nfrom tqdm import tqdm\nimport re","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-22T11:23:30.211750Z","iopub.execute_input":"2024-08-22T11:23:30.212154Z","iopub.status.idle":"2024-08-22T11:23:33.204119Z","shell.execute_reply.started":"2024-08-22T11:23:30.212118Z","shell.execute_reply":"2024-08-22T11:23:33.202896Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"api = \"YOUR_API_KEY\"\nos.environ[\"OPENAI_API_KEY\"] = api\nclient = OpenAI()","metadata":{"execution":{"iopub.status.busy":"2024-08-22T11:23:34.774659Z","iopub.execute_input":"2024-08-22T11:23:34.775224Z","iopub.status.idle":"2024-08-22T11:23:34.798044Z","shell.execute_reply.started":"2024-08-22T11:23:34.775192Z","shell.execute_reply":"2024-08-22T11:23:34.796779Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ds = load_dataset(\"Ayush-Singh/llms-are-blind-captions_florence2-large\")\nds","metadata":{"execution":{"iopub.status.busy":"2024-08-22T11:23:37.732979Z","iopub.execute_input":"2024-08-22T11:23:37.733374Z","iopub.status.idle":"2024-08-22T11:23:58.066543Z","shell.execute_reply.started":"2024-08-22T11:23:37.733345Z","shell.execute_reply":"2024-08-22T11:23:58.065109Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_accuracy(l1,l2):\n    count = 0\n    for x,y in zip(l1,l2):\n        if x==y:\n            count+=1\n    return count/len(l1)*100","metadata":{"execution":{"iopub.status.busy":"2024-08-22T11:34:34.120596Z","iopub.execute_input":"2024-08-22T11:34:34.121004Z","iopub.status.idle":"2024-08-22T11:34:34.127704Z","shell.execute_reply.started":"2024-08-22T11:34:34.120975Z","shell.execute_reply":"2024-08-22T11:34:34.126140Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_image_url(pil_image):\n    buffered = BytesIO()\n    pil_image.save(buffered, format=\"PNG\")\n    base64_image = base64.b64encode(buffered.getvalue()).decode(\"utf-8\")\n    return f\"data:image/png;base64,{base64_image}\"","metadata":{"execution":{"iopub.status.busy":"2024-08-22T11:24:03.421240Z","iopub.execute_input":"2024-08-22T11:24:03.422428Z","iopub.status.idle":"2024-08-22T11:24:03.433092Z","shell.execute_reply.started":"2024-08-22T11:24:03.422379Z","shell.execute_reply":"2024-08-22T11:24:03.431854Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def generate(client,dataset,prompt=None):\n    results_a = []\n    model_name = \"gpt-4o-mini\"\n    \n    for sample in tqdm(dataset):\n        image_url = get_image_url(sample['image'])\n\n        if prompt==None:\n            prompt = sample['prompt']\n        \n        messages=[{\n            \"role\": \"user\",\n            \"content\": [\n                {\"type\": \"text\", \"text\": f\"{prompt}\"},\n                {\"type\": \"image_url\", \"image_url\": {\"url\": f\"{image_url}\"},},\n                       ],\n                    }\n                 ]\n        response = client.chat.completions.create(model = model_name,messages = messages,seed = 300,max_tokens = 100)\n        response = response.choices[0].message.content\n        #print(response)\n        qa = \"From the description about the image answer the Question strictly in the asked format. \" + \\\n             \"Description : \" + response + \\\n             \"Question : \" + sample['prompt']\n        \n        message_qa=[{\n            \"role\": \"user\",\n            \"content\": [{\"type\": \"text\", \"text\": f\"{qa}\"}]\n                   }]\n        \n        response_a = client.chat.completions.create(model = model_name,messages = message_qa,seed = 300,max_tokens = 100)\n        response_a = response_a.choices[0].message.content\n        #print(response_a)\n        results_a.append(response_a)\n        \n    return results_a","metadata":{"execution":{"iopub.status.busy":"2024-08-22T11:24:48.926450Z","iopub.execute_input":"2024-08-22T11:24:48.926863Z","iopub.status.idle":"2024-08-22T11:24:48.936115Z","shell.execute_reply.started":"2024-08-22T11:24:48.926833Z","shell.execute_reply":"2024-08-22T11:24:48.934823Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Geometry","metadata":{}},{"cell_type":"markdown","source":"#### 1","metadata":{}},{"cell_type":"code","source":"Sample_Touching_Circles = ds['Touching_Circles'].select(range(100))\nSample_Touching_Circles","metadata":{"execution":{"iopub.status.busy":"2024-08-22T11:40:38.306621Z","iopub.execute_input":"2024-08-22T11:40:38.307045Z","iopub.status.idle":"2024-08-22T11:40:38.320253Z","shell.execute_reply.started":"2024-08-22T11:40:38.307013Z","shell.execute_reply":"2024-08-22T11:40:38.318936Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"Caption on the position of each circle with respect to each other. \"\nresult_tc = generate(client,Sample_Touching_Circles,prompt)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T11:41:00.017031Z","iopub.execute_input":"2024-08-22T11:41:00.017474Z","iopub.status.idle":"2024-08-22T11:49:41.710268Z","shell.execute_reply.started":"2024-08-22T11:41:00.017438Z","shell.execute_reply":"2024-08-22T11:49:41.709060Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(result_tc)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T11:49:44.619412Z","iopub.execute_input":"2024-08-22T11:49:44.619857Z","iopub.status.idle":"2024-08-22T11:49:44.625519Z","shell.execute_reply.started":"2024-08-22T11:49:44.619818Z","shell.execute_reply":"2024-08-22T11:49:44.624391Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cleaned_data = [re.sub(r'\\.$', '', item) for item in result_tc]\nprint(cleaned_data)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T11:49:52.000902Z","iopub.execute_input":"2024-08-22T11:49:52.001279Z","iopub.status.idle":"2024-08-22T11:49:52.007659Z","shell.execute_reply.started":"2024-08-22T11:49:52.001252Z","shell.execute_reply":"2024-08-22T11:49:52.006421Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Accuracy\nprint(\"Accuracy is = \",get_accuracy(cleaned_data,Sample_Touching_Circles['groundtruth']))","metadata":{"execution":{"iopub.status.busy":"2024-08-22T11:49:56.016732Z","iopub.execute_input":"2024-08-22T11:49:56.017099Z","iopub.status.idle":"2024-08-22T11:49:56.023377Z","shell.execute_reply.started":"2024-08-22T11:49:56.017071Z","shell.execute_reply":"2024-08-22T11:49:56.022178Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### 2","metadata":{}},{"cell_type":"code","source":"Sample_Line_Intersecting = ds['Line_Plot_Intersections'].select(range(100))\nSample_Line_Intersecting","metadata":{"execution":{"iopub.status.busy":"2024-08-22T11:54:44.293409Z","iopub.execute_input":"2024-08-22T11:54:44.293793Z","iopub.status.idle":"2024-08-22T11:54:44.306868Z","shell.execute_reply.started":"2024-08-22T11:54:44.293765Z","shell.execute_reply":"2024-08-22T11:54:44.305711Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"Describe whether the two lines are intersecting or not. \"\nresults_lp = []\nmodel_name = \"gpt-4o-mini\"\n    \nfor sample in tqdm(Sample_Line_Intersecting):\n    image_url = get_image_url(sample['image'])\n\n    if prompt==None:\n        prompt = sample['prompt']\n        \n    messages=[{\n            \"role\": \"user\",\n            \"content\": [\n                {\"type\": \"text\", \"text\": f\"{prompt}\"},\n                {\"type\": \"image_url\", \"image_url\": {\"url\": f\"{image_url}\"},},\n                       ],\n                    }\n                 ]\n    response = client.chat.completions.create(model = model_name,messages = messages,seed = 300,max_tokens = 100)\n    response = response.choices[0].message.content\n#         print(response)\n    qa = \"From the description about the image answer the question. \" + \\\n             \"Description : \" + response + \\\n             \"Question : \" + \"Are the two lines intersecting. Answer just Yes/No.\"\n        \n    message_qa=[{\n            \"role\": \"user\",\n            \"content\": [{\"type\": \"text\", \"text\": f\"{qa}\"}]\n                   }]\n    response_a = client.chat.completions.create(model = model_name,messages = message_qa,seed = 300,max_tokens = 100)\n    response_a = response_a.choices[0].message.content\n        #print(response_a)\n    results_lp.append(response_a)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T11:56:44.421586Z","iopub.execute_input":"2024-08-22T11:56:44.422008Z","iopub.status.idle":"2024-08-22T12:01:42.704211Z","shell.execute_reply.started":"2024-08-22T11:56:44.421975Z","shell.execute_reply":"2024-08-22T12:01:42.702981Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(results_lp)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T12:01:56.021832Z","iopub.execute_input":"2024-08-22T12:01:56.022266Z","iopub.status.idle":"2024-08-22T12:01:56.027912Z","shell.execute_reply.started":"2024-08-22T12:01:56.022232Z","shell.execute_reply":"2024-08-22T12:01:56.026792Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cleaned_data = [re.sub(r'\\.$', '', item) for item in results_lp]\nprint(cleaned_data)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T12:02:01.624508Z","iopub.execute_input":"2024-08-22T12:02:01.624987Z","iopub.status.idle":"2024-08-22T12:02:01.631516Z","shell.execute_reply.started":"2024-08-22T12:02:01.624956Z","shell.execute_reply":"2024-08-22T12:02:01.630114Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Accuracy\ncount = 0\nfor x,y in zip(cleaned_data,Sample_Line_Intersecting['groundtruth']):\n    if (x=='Yes' and y!='0') or (x=='No' and y==0):\n        count+=1\nprint(\"Accuracy is \", count/len(results_lp)*100)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T12:02:05.227283Z","iopub.execute_input":"2024-08-22T12:02:05.227775Z","iopub.status.idle":"2024-08-22T12:02:05.236366Z","shell.execute_reply.started":"2024-08-22T12:02:05.227739Z","shell.execute_reply":"2024-08-22T12:02:05.235102Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### 3","metadata":{}},{"cell_type":"code","source":"#### Circled Letters\nSample_Circled_Letter = ds['Circled_Letter'].select(range(100))\nSample_Circled_Letter","metadata":{"execution":{"iopub.status.busy":"2024-08-22T11:28:19.012803Z","iopub.execute_input":"2024-08-22T11:28:19.013226Z","iopub.status.idle":"2024-08-22T11:28:19.025511Z","shell.execute_reply.started":"2024-08-22T11:28:19.013193Z","shell.execute_reply":"2024-08-22T11:28:19.024162Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def generate_mod(client,dataset,prompt=None):\n    results_a = []\n    model_name = \"gpt-4o-mini\"\n    \n    for sample in tqdm(dataset):\n        image_url = get_image_url(sample['image'])\n\n        if prompt==None:\n            prompt = sample['prompt']\n        \n        messages=[{\n            \"role\": \"user\",\n            \"content\": [\n                {\"type\": \"text\", \"text\": f\"{prompt}\"},\n                {\"type\": \"image_url\", \"image_url\": {\"url\": f\"{image_url}\"},},\n                       ],\n                    }\n                 ]\n        response = client.chat.completions.create(model = model_name,messages = messages,seed = 300,max_tokens = 75)\n        response = response.choices[0].message.content\n        #print(response)\n        qa = \"From the description about the image answer the Question strictly in the asked format. \" + \\\n             \"Description : \" + response + \\\n             \"Question : \" + sample['prompt'] + \"Answer in just a single character.\"\n        \n        message_qa=[{\n            \"role\": \"user\",\n            \"content\": [{\"type\": \"text\", \"text\": f\"{qa}\"}]\n                   }]\n        \n        response_a = client.chat.completions.create(model = model_name,messages = message_qa,seed = 300,max_tokens = 100)\n        response_a = response_a.choices[0].message.content\n        #print(response_a)\n        results_a.append(response_a)\n        \n    return results_a","metadata":{"execution":{"iopub.status.busy":"2024-08-22T11:28:13.242700Z","iopub.execute_input":"2024-08-22T11:28:13.243106Z","iopub.status.idle":"2024-08-22T11:28:13.253388Z","shell.execute_reply.started":"2024-08-22T11:28:13.243074Z","shell.execute_reply":"2024-08-22T11:28:13.251908Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"Caption the image focusing on what letter is in the red oval\"\nresults_cl = generate_mod(client,Sample_Circled_Letter,prompt)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T11:28:27.929751Z","iopub.execute_input":"2024-08-22T11:28:27.930180Z","iopub.status.idle":"2024-08-22T11:32:14.548992Z","shell.execute_reply.started":"2024-08-22T11:28:27.930147Z","shell.execute_reply":"2024-08-22T11:32:14.547715Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(results_cl)","metadata":{"execution":{"iopub.status.busy":"2024-08-22T11:32:38.970709Z","iopub.execute_input":"2024-08-22T11:32:38.971115Z","iopub.status.idle":"2024-08-22T11:32:38.977211Z","shell.execute_reply.started":"2024-08-22T11:32:38.971083Z","shell.execute_reply":"2024-08-22T11:32:38.975979Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Accuracy is = \",get_accuracy(results_cl,Sample_Circled_Letter['groundtruth']))","metadata":{"execution":{"iopub.status.busy":"2024-08-22T11:34:47.833982Z","iopub.execute_input":"2024-08-22T11:34:47.834370Z","iopub.status.idle":"2024-08-22T11:34:47.841232Z","shell.execute_reply.started":"2024-08-22T11:34:47.834323Z","shell.execute_reply":"2024-08-22T11:34:47.839934Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Counting","metadata":{}},{"cell_type":"markdown","source":"### 1 - Counting Circles","metadata":{}},{"cell_type":"code","source":"Sample_Olympic_Ring = ds['Olympic_Counting_Circles'].select(range(100))\nSample_Olympic_Ring","metadata":{"execution":{"iopub.status.busy":"2024-08-21T18:35:44.515778Z","iopub.execute_input":"2024-08-21T18:35:44.516194Z","iopub.status.idle":"2024-08-21T18:35:44.533162Z","shell.execute_reply.started":"2024-08-21T18:35:44.516163Z","shell.execute_reply":"2024-08-21T18:35:44.531659Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"Caption the image describing the total number of circles in the image? \"\nresult_or = generate(client,Sample_Olympic_Ring,prompt)","metadata":{"execution":{"iopub.status.busy":"2024-08-21T18:36:40.282170Z","iopub.execute_input":"2024-08-21T18:36:40.282677Z","iopub.status.idle":"2024-08-21T18:40:47.753143Z","shell.execute_reply.started":"2024-08-21T18:36:40.282642Z","shell.execute_reply":"2024-08-21T18:40:47.751521Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(result_or)","metadata":{"execution":{"iopub.status.busy":"2024-08-21T18:40:58.697617Z","iopub.execute_input":"2024-08-21T18:40:58.698070Z","iopub.status.idle":"2024-08-21T18:40:58.705129Z","shell.execute_reply.started":"2024-08-21T18:40:58.698035Z","shell.execute_reply":"2024-08-21T18:40:58.703801Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results = [re.findall(r'\\d+', item)[0] for item in result_or]\nprint(results)","metadata":{"execution":{"iopub.status.busy":"2024-08-21T18:42:17.979752Z","iopub.execute_input":"2024-08-21T18:42:17.980332Z","iopub.status.idle":"2024-08-21T18:42:17.988964Z","shell.execute_reply.started":"2024-08-21T18:42:17.980292Z","shell.execute_reply":"2024-08-21T18:42:17.987588Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Accuracy\ndef get_accuracy(l1,l2):\n    count = 0\n    for x,y in zip(l1,l2):\n        if x==y:\n            count+=1\n    return count/len(l1)*100","metadata":{"execution":{"iopub.status.busy":"2024-08-21T18:42:52.623604Z","iopub.execute_input":"2024-08-21T18:42:52.624000Z","iopub.status.idle":"2024-08-21T18:42:52.631605Z","shell.execute_reply.started":"2024-08-21T18:42:52.623971Z","shell.execute_reply":"2024-08-21T18:42:52.629814Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Accuracy is = \",get_accuracy(results,Sample_Olympic_Ring['groundtruth']))","metadata":{"execution":{"iopub.status.busy":"2024-08-21T18:44:10.782173Z","iopub.execute_input":"2024-08-21T18:44:10.782729Z","iopub.status.idle":"2024-08-21T18:44:10.791335Z","shell.execute_reply.started":"2024-08-21T18:44:10.782693Z","shell.execute_reply":"2024-08-21T18:44:10.789776Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### 2 - Number of Intersections","metadata":{}},{"cell_type":"code","source":"Sample_Line_Point_Int = ds['Line_Plot_Intersections'].select(range(100))\nSample_Line_Point_Int","metadata":{"execution":{"iopub.status.busy":"2024-08-21T18:51:25.541897Z","iopub.execute_input":"2024-08-21T18:51:25.542567Z","iopub.status.idle":"2024-08-21T18:51:25.563282Z","shell.execute_reply.started":"2024-08-21T18:51:25.542517Z","shell.execute_reply":"2024-08-21T18:51:25.561182Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"Caption the image describing the intersection of blue and red line plots. \"\nresult_lpi = generate(client,Sample_Line_Point_Int,prompt)","metadata":{"execution":{"iopub.status.busy":"2024-08-21T18:51:59.350741Z","iopub.execute_input":"2024-08-21T18:51:59.351182Z","iopub.status.idle":"2024-08-21T18:57:31.491763Z","shell.execute_reply.started":"2024-08-21T18:51:59.351149Z","shell.execute_reply":"2024-08-21T18:57:31.490296Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(result_lpi)","metadata":{"execution":{"iopub.status.busy":"2024-08-21T18:57:40.693913Z","iopub.execute_input":"2024-08-21T18:57:40.694521Z","iopub.status.idle":"2024-08-21T18:57:40.702031Z","shell.execute_reply.started":"2024-08-21T18:57:40.694480Z","shell.execute_reply":"2024-08-21T18:57:40.700570Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results = [re.findall(r'\\d+', item)[0] for item in result_lpi]\nprint(results)","metadata":{"execution":{"iopub.status.busy":"2024-08-21T18:57:51.140987Z","iopub.execute_input":"2024-08-21T18:57:51.141485Z","iopub.status.idle":"2024-08-21T18:57:51.149272Z","shell.execute_reply.started":"2024-08-21T18:57:51.141449Z","shell.execute_reply":"2024-08-21T18:57:51.147673Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Accuracy is \",get_accuracy(results,Sample_Line_Point_Int['groundtruth']))","metadata":{"execution":{"iopub.status.busy":"2024-08-21T18:57:53.991572Z","iopub.execute_input":"2024-08-21T18:57:53.992981Z","iopub.status.idle":"2024-08-21T18:57:54.000463Z","shell.execute_reply.started":"2024-08-21T18:57:53.992939Z","shell.execute_reply":"2024-08-21T18:57:53.998754Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### 3","metadata":{}},{"cell_type":"code","source":"Sample_Rows = ds['Counting_Grid_Blank_Grids'].select(range(100))\nSample_Rows","metadata":{"execution":{"iopub.status.busy":"2024-08-21T18:58:36.395373Z","iopub.execute_input":"2024-08-21T18:58:36.395845Z","iopub.status.idle":"2024-08-21T18:58:36.409445Z","shell.execute_reply.started":"2024-08-21T18:58:36.395812Z","shell.execute_reply":"2024-08-21T18:58:36.408243Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"Caption on the number of rows and number of columns in the image of grid. \"\nresult_cr = generate(client,Sample_Rows,prompt)","metadata":{"execution":{"iopub.status.busy":"2024-08-21T19:00:39.506337Z","iopub.execute_input":"2024-08-21T19:00:39.507485Z","iopub.status.idle":"2024-08-21T19:05:07.907846Z","shell.execute_reply.started":"2024-08-21T19:00:39.507430Z","shell.execute_reply":"2024-08-21T19:05:07.906275Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(result_cr)","metadata":{"execution":{"iopub.status.busy":"2024-08-21T19:08:32.975601Z","iopub.execute_input":"2024-08-21T19:08:32.977067Z","iopub.status.idle":"2024-08-21T19:08:32.983745Z","shell.execute_reply.started":"2024-08-21T19:08:32.977014Z","shell.execute_reply":"2024-08-21T19:08:32.982247Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def extract_row_column(entry):\n    if 'rows=' in entry and 'columns=' in entry:\n        # Extract numbers from 'rows={x} columns={y}' format\n        row = entry.split('rows={')[1].split('}')[0]\n        col = entry.split('columns={')[1].split('}')[0]\n        return f\"{row},{col}\"\n    elif '(' in entry and ')' in entry:\n        # Extract numbers from '(x,y)' format\n        return entry.strip('()')\n\n# Replace all elements in the list with \"row,column\" format\nnew_data = [extract_row_column(item) for item in result_cr]\n\n# Print the new list\nprint(new_data)","metadata":{"execution":{"iopub.status.busy":"2024-08-21T19:12:34.324909Z","iopub.execute_input":"2024-08-21T19:12:34.326481Z","iopub.status.idle":"2024-08-21T19:12:34.336575Z","shell.execute_reply.started":"2024-08-21T19:12:34.326436Z","shell.execute_reply":"2024-08-21T19:12:34.334900Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Extract\nresults = [re.search(r'\\{([^}]*)\\}', item).group(1) if re.search(r'\\{([^}]*)\\}', item) else \"NA\" for item in results_cr]\nprint(results)","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Accuracy\nprint(\"Accuracy is = \",get_accuracy(new_data,Sample_Rows['groundtruth']))","metadata":{"execution":{"iopub.status.busy":"2024-08-21T19:13:01.231779Z","iopub.execute_input":"2024-08-21T19:13:01.232300Z","iopub.status.idle":"2024-08-21T19:13:01.240681Z","shell.execute_reply.started":"2024-08-21T19:13:01.232263Z","shell.execute_reply":"2024-08-21T19:13:01.239038Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### 4","metadata":{}},{"cell_type":"code","source":"Sample_Subway = ds['Subway_Connections'].select(range(100))\nSample_Subway","metadata":{"execution":{"iopub.status.busy":"2024-08-21T19:13:30.216814Z","iopub.execute_input":"2024-08-21T19:13:30.217255Z","iopub.status.idle":"2024-08-21T19:13:30.232551Z","shell.execute_reply.started":"2024-08-21T19:13:30.217197Z","shell.execute_reply":"2024-08-21T19:13:30.231203Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"Describe the paths connecting 4 subway stations located at the 4 edge centers of a square.\"\nresult_sc = generate(client,Sample_Subway,prompt)","metadata":{"execution":{"iopub.status.busy":"2024-08-21T19:13:44.096349Z","iopub.execute_input":"2024-08-21T19:13:44.097531Z","iopub.status.idle":"2024-08-21T19:22:39.666942Z","shell.execute_reply.started":"2024-08-21T19:13:44.097493Z","shell.execute_reply":"2024-08-21T19:22:39.665589Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(result_sc)","metadata":{"execution":{"iopub.status.busy":"2024-08-21T19:22:42.818370Z","iopub.execute_input":"2024-08-21T19:22:42.818793Z","iopub.status.idle":"2024-08-21T19:22:42.827138Z","shell.execute_reply.started":"2024-08-21T19:22:42.818761Z","shell.execute_reply":"2024-08-21T19:22:42.825553Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results = [re.findall(r'\\d+', item)[0] if re.findall(r'\\d+', item) else -1 for item in result_sc]\nprint(results)","metadata":{"execution":{"iopub.status.busy":"2024-08-21T19:23:18.764756Z","iopub.execute_input":"2024-08-21T19:23:18.765170Z","iopub.status.idle":"2024-08-21T19:23:18.773746Z","shell.execute_reply.started":"2024-08-21T19:23:18.765139Z","shell.execute_reply":"2024-08-21T19:23:18.772402Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Accuracy\nprint(\"Accuracy is = \",get_accuracy(results,Sample_Subway['groundtruth']))","metadata":{"execution":{"iopub.status.busy":"2024-08-21T19:23:44.017670Z","iopub.execute_input":"2024-08-21T19:23:44.018120Z","iopub.status.idle":"2024-08-21T19:23:44.026072Z","shell.execute_reply.started":"2024-08-21T19:23:44.018089Z","shell.execute_reply":"2024-08-21T19:23:44.024507Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### 5","metadata":{}},{"cell_type":"code","source":"Sample_Nested = ds['Nested_Squares'].select(range(100))\nSample_Nested","metadata":{"execution":{"iopub.status.busy":"2024-08-21T19:24:21.501701Z","iopub.execute_input":"2024-08-21T19:24:21.502108Z","iopub.status.idle":"2024-08-21T19:24:21.516384Z","shell.execute_reply.started":"2024-08-21T19:24:21.502076Z","shell.execute_reply":"2024-08-21T19:24:21.515051Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"Describe the total number of squares in the image. \"\nresult_ns = generate(client,Sample_Nested,prompt)","metadata":{"execution":{"iopub.status.busy":"2024-08-21T19:24:34.967691Z","iopub.execute_input":"2024-08-21T19:24:34.968083Z","iopub.status.idle":"2024-08-21T19:29:42.220935Z","shell.execute_reply.started":"2024-08-21T19:24:34.968054Z","shell.execute_reply":"2024-08-21T19:29:42.219435Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(result_ns)","metadata":{"execution":{"iopub.status.busy":"2024-08-21T19:29:45.339652Z","iopub.execute_input":"2024-08-21T19:29:45.340166Z","iopub.status.idle":"2024-08-21T19:29:45.349053Z","shell.execute_reply.started":"2024-08-21T19:29:45.340131Z","shell.execute_reply":"2024-08-21T19:29:45.347158Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results = [re.findall(r'\\d+', item)[0] for item in result_ns]\nprint(results)","metadata":{"execution":{"iopub.status.busy":"2024-08-21T19:29:58.963771Z","iopub.execute_input":"2024-08-21T19:29:58.964933Z","iopub.status.idle":"2024-08-21T19:29:58.972868Z","shell.execute_reply.started":"2024-08-21T19:29:58.964884Z","shell.execute_reply":"2024-08-21T19:29:58.971344Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Accuracy is = \",get_accuracy(results,Sample_Nested['groundtruth']))","metadata":{"execution":{"iopub.status.busy":"2024-08-21T19:30:07.276775Z","iopub.execute_input":"2024-08-21T19:30:07.277203Z","iopub.status.idle":"2024-08-21T19:30:07.285651Z","shell.execute_reply.started":"2024-08-21T19:30:07.277170Z","shell.execute_reply":"2024-08-21T19:30:07.284179Z"},"trusted":true},"execution_count":null,"outputs":[]}]}