{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"!pip install openai","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from datasets import load_dataset\nimport base64\nfrom pathlib import Path\nimport base64\nfrom io import BytesIO\nfrom PIL import Image\nimport os\nfrom openai import OpenAI\nfrom tqdm import tqdm\nimport re","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"api = \"YOUR_API_KEY\"\nos.environ[\"OPENAI_API_KEY\"] = api\nclient = OpenAI()","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.173364Z","iopub.status.idle":"2024-08-24T23:16:56.173842Z","shell.execute_reply.started":"2024-08-24T23:16:56.173631Z","shell.execute_reply":"2024-08-24T23:16:56.173653Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"ds = load_dataset(\"Ayush-Singh/llms-are-blind-captions_florence2-large\")\nds","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.175648Z","iopub.status.idle":"2024-08-24T23:16:56.176068Z","shell.execute_reply.started":"2024-08-24T23:16:56.175876Z","shell.execute_reply":"2024-08-24T23:16:56.175895Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_accuracy(l1,l2):\n    count = 0\n    for x,y in zip(l1,l2):\n        if x==y:\n            count+=1\n    return count/len(l1)*100","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.178350Z","iopub.status.idle":"2024-08-24T23:16:56.178980Z","shell.execute_reply.started":"2024-08-24T23:16:56.178694Z","shell.execute_reply":"2024-08-24T23:16:56.178723Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def get_image_url(pil_image):\n    buffered = BytesIO()\n    pil_image.save(buffered, format=\"PNG\")\n    base64_image = base64.b64encode(buffered.getvalue()).decode(\"utf-8\")\n    return f\"data:image/png;base64,{base64_image}\"","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.181471Z","iopub.status.idle":"2024-08-24T23:16:56.181916Z","shell.execute_reply.started":"2024-08-24T23:16:56.181701Z","shell.execute_reply":"2024-08-24T23:16:56.181722Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def generate(client,dataset,prompt=None):\n    results = []\n    model_name = \"gpt-4o-mini\"\n    \n    for sample in tqdm(dataset):\n        image_url = get_image_url(sample['image'])\n        if prompt==None:\n            prompt = sample['prompt']\n        \n        messages=[{\n            \"role\": \"user\",\n            \"content\": [\n                {\"type\": \"text\", \"text\": f\"{prompt}\"},\n                {\"type\": \"image_url\", \"image_url\": {\"url\": f\"{image_url}\"},}\n                       ]\n                    }\n                 ]\n        response = client.chat.completions.create(model = model_name,messages = messages,seed = 300,max_tokens = 100)\n        response = response.choices[0].message.content\n\n        #print(response)\n        results.append(response)\n        \n    return results","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.182966Z","iopub.status.idle":"2024-08-24T23:16:56.183382Z","shell.execute_reply.started":"2024-08-24T23:16:56.183175Z","shell.execute_reply":"2024-08-24T23:16:56.183195Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Counting","metadata":{}},{"cell_type":"markdown","source":"#### Number of Intersection","metadata":{}},{"cell_type":"code","source":"Sample_Line_Point_Int = ds['Line_Plot_Intersections'].select(range(100))\nSample_Line_Point_Int","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.185031Z","iopub.status.idle":"2024-08-24T23:16:56.185524Z","shell.execute_reply.started":"2024-08-24T23:16:56.185254Z","shell.execute_reply":"2024-08-24T23:16:56.185275Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"result_lpi = generate(client,Sample_Line_Point_Int)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.187693Z","iopub.status.idle":"2024-08-24T23:16:56.188094Z","shell.execute_reply.started":"2024-08-24T23:16:56.187904Z","shell.execute_reply":"2024-08-24T23:16:56.187924Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results = [re.findall(r'\\d+', item)[0] for item in result_lpi]\nprint(results)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.191213Z","iopub.status.idle":"2024-08-24T23:16:56.191905Z","shell.execute_reply.started":"2024-08-24T23:16:56.191552Z","shell.execute_reply":"2024-08-24T23:16:56.191586Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Accuracy is = \", get_accuracy(results,Sample_Line_Point_Int['groundtruth']))","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.193850Z","iopub.status.idle":"2024-08-24T23:16:56.194311Z","shell.execute_reply.started":"2024-08-24T23:16:56.194101Z","shell.execute_reply":"2024-08-24T23:16:56.194123Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Counting Cirlces","metadata":{}},{"cell_type":"code","source":"Sample_Olympic_Ring = ds['Olympic_Counting_Circles'].select(range(100))\nSample_Olympic_Ring","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.196535Z","iopub.status.idle":"2024-08-24T23:16:56.197099Z","shell.execute_reply.started":"2024-08-24T23:16:56.196821Z","shell.execute_reply":"2024-08-24T23:16:56.196849Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"result_or = generate(client,Sample_Olympic_Ring)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.198501Z","iopub.status.idle":"2024-08-24T23:16:56.199062Z","shell.execute_reply.started":"2024-08-24T23:16:56.198782Z","shell.execute_reply":"2024-08-24T23:16:56.198811Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(result_or)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.200506Z","iopub.status.idle":"2024-08-24T23:16:56.201053Z","shell.execute_reply.started":"2024-08-24T23:16:56.200776Z","shell.execute_reply":"2024-08-24T23:16:56.200804Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results = [re.findall(r'\\d+', item)[0] for item in result_or]\nprint(results)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.204144Z","iopub.status.idle":"2024-08-24T23:16:56.204765Z","shell.execute_reply.started":"2024-08-24T23:16:56.204452Z","shell.execute_reply":"2024-08-24T23:16:56.204484Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Accuracy is = \",get_accuracy(results,Sample_Olympic_Ring['groundtruth']))","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.206581Z","iopub.status.idle":"2024-08-24T23:16:56.206996Z","shell.execute_reply.started":"2024-08-24T23:16:56.206801Z","shell.execute_reply":"2024-08-24T23:16:56.206821Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Number of rows/columns","metadata":{}},{"cell_type":"code","source":"Sample_Rows = ds['Counting_Grid_Blank_Grids'].select(range(100))\nSample_Rows","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.208341Z","iopub.status.idle":"2024-08-24T23:16:56.208944Z","shell.execute_reply.started":"2024-08-24T23:16:56.208655Z","shell.execute_reply":"2024-08-24T23:16:56.208685Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"result_cr = generate(client,Sample_Rows)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.210802Z","iopub.status.idle":"2024-08-24T23:16:56.211281Z","shell.execute_reply.started":"2024-08-24T23:16:56.211075Z","shell.execute_reply":"2024-08-24T23:16:56.211096Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(result_cr)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.215110Z","iopub.status.idle":"2024-08-24T23:16:56.216248Z","shell.execute_reply.started":"2024-08-24T23:16:56.215940Z","shell.execute_reply":"2024-08-24T23:16:56.215973Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def extract_row_column(entry):\n    if 'rows=' in entry and 'columns=' in entry:\n        # Extract numbers from 'rows={x} columns={y}' format\n        row = entry.split('rows={')[1].split('}')[0]\n        col = entry.split('columns={')[1].split('}')[0]\n        return f\"{row},{col}\"\n    elif '(' in entry and ')' in entry:\n        # Extract numbers from '(x,y)' format\n        return entry.strip('()')\n\n# Replace all elements in the list with \"row,column\" format\nnew_data = [extract_row_column(item) for item in result_cr]\n\n# Print the new list\nprint(new_data)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.217685Z","iopub.status.idle":"2024-08-24T23:16:56.218285Z","shell.execute_reply.started":"2024-08-24T23:16:56.217979Z","shell.execute_reply":"2024-08-24T23:16:56.218029Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Accuracy is = \",get_accuracy(new_data,Sample_Rows['groundtruth']))","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.220843Z","iopub.status.idle":"2024-08-24T23:16:56.221410Z","shell.execute_reply.started":"2024-08-24T23:16:56.221133Z","shell.execute_reply":"2024-08-24T23:16:56.221161Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Subway Connections","metadata":{}},{"cell_type":"code","source":"Sample_Subway = ds['Subway_Connections'].select(range(100))\nSample_Subway","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.224078Z","iopub.status.idle":"2024-08-24T23:16:56.225035Z","shell.execute_reply.started":"2024-08-24T23:16:56.224804Z","shell.execute_reply":"2024-08-24T23:16:56.224831Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"result_sc = generate(client,Sample_Subway)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.226297Z","iopub.status.idle":"2024-08-24T23:16:56.226751Z","shell.execute_reply.started":"2024-08-24T23:16:56.226549Z","shell.execute_reply":"2024-08-24T23:16:56.226570Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(result_sc)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.227710Z","iopub.status.idle":"2024-08-24T23:16:56.228097Z","shell.execute_reply.started":"2024-08-24T23:16:56.227909Z","shell.execute_reply":"2024-08-24T23:16:56.227929Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results = [re.findall(r'\\d+', item)[0] if re.findall(r'\\d+', item) else -1 for item in result_sc]\nprint(results)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.229652Z","iopub.status.idle":"2024-08-24T23:16:56.230057Z","shell.execute_reply.started":"2024-08-24T23:16:56.229863Z","shell.execute_reply":"2024-08-24T23:16:56.229884Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Accuracy is = \",get_accuracy(results,Sample_Subway['groundtruth']))","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.231929Z","iopub.status.idle":"2024-08-24T23:16:56.232761Z","shell.execute_reply.started":"2024-08-24T23:16:56.232509Z","shell.execute_reply":"2024-08-24T23:16:56.232534Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Nested Squares","metadata":{}},{"cell_type":"code","source":"Sample_Nested = ds['Nested_Squares'].select(range(100))\nSample_Nested","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.234381Z","iopub.status.idle":"2024-08-24T23:16:56.234961Z","shell.execute_reply.started":"2024-08-24T23:16:56.234676Z","shell.execute_reply":"2024-08-24T23:16:56.234712Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"result_ns = generate(client,Sample_Nested)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.237249Z","iopub.status.idle":"2024-08-24T23:16:56.238134Z","shell.execute_reply.started":"2024-08-24T23:16:56.237544Z","shell.execute_reply":"2024-08-24T23:16:56.237573Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(result_ns)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.239835Z","iopub.status.idle":"2024-08-24T23:16:56.240407Z","shell.execute_reply.started":"2024-08-24T23:16:56.240125Z","shell.execute_reply":"2024-08-24T23:16:56.240152Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results = [re.findall(r'\\d+', item)[0] for item in result_ns]\nprint(results)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.241884Z","iopub.status.idle":"2024-08-24T23:16:56.242421Z","shell.execute_reply.started":"2024-08-24T23:16:56.242146Z","shell.execute_reply":"2024-08-24T23:16:56.242175Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Accuracy is = \",get_accuracy(results,Sample_Nested['groundtruth']))","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.243581Z","iopub.status.idle":"2024-08-24T23:16:56.244119Z","shell.execute_reply.started":"2024-08-24T23:16:56.243846Z","shell.execute_reply":"2024-08-24T23:16:56.243873Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Geoemtry","metadata":{}},{"cell_type":"markdown","source":"#### Touching circles","metadata":{}},{"cell_type":"code","source":"Sample_Touching_Circles = ds['Touching_Circles'].select(range(100))\nSample_Touching_Circles","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.245320Z","iopub.status.idle":"2024-08-24T23:16:56.245921Z","shell.execute_reply.started":"2024-08-24T23:16:56.245600Z","shell.execute_reply":"2024-08-24T23:16:56.245644Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"result_tc = generate(client,Sample_Touching_Circles)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.248463Z","iopub.status.idle":"2024-08-24T23:16:56.249166Z","shell.execute_reply.started":"2024-08-24T23:16:56.248883Z","shell.execute_reply":"2024-08-24T23:16:56.248915Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(result_tc)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.250503Z","iopub.status.idle":"2024-08-24T23:16:56.250932Z","shell.execute_reply.started":"2024-08-24T23:16:56.250731Z","shell.execute_reply":"2024-08-24T23:16:56.250756Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cleaned_data = [re.sub(r'\\.$', '', item) for item in result_tc]\nprint(cleaned_data)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.253213Z","iopub.status.idle":"2024-08-24T23:16:56.253809Z","shell.execute_reply.started":"2024-08-24T23:16:56.253578Z","shell.execute_reply":"2024-08-24T23:16:56.253604Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Accuracy is = \",get_accuracy(cleaned_data,Sample_Touching_Circles['groundtruth']))","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.255296Z","iopub.status.idle":"2024-08-24T23:16:56.255742Z","shell.execute_reply.started":"2024-08-24T23:16:56.255544Z","shell.execute_reply":"2024-08-24T23:16:56.255565Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Are lines intersecting","metadata":{}},{"cell_type":"code","source":"Sample_Line_Intersecting = ds['Line_Plot_Intersections'].select(range(100))\nSample_Line_Intersecting","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.257717Z","iopub.status.idle":"2024-08-24T23:16:56.258171Z","shell.execute_reply.started":"2024-08-24T23:16:56.257962Z","shell.execute_reply":"2024-08-24T23:16:56.257989Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"prompt = \"Are the two lines intersecting. Answer in just a single word Yes/No.\"\nresults_lp = generate(client,Sample_Line_Intersecting,prompt)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.262043Z","iopub.status.idle":"2024-08-24T23:16:56.264922Z","shell.execute_reply.started":"2024-08-24T23:16:56.264629Z","shell.execute_reply":"2024-08-24T23:16:56.264662Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(results_lp)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.266103Z","iopub.status.idle":"2024-08-24T23:16:56.266512Z","shell.execute_reply.started":"2024-08-24T23:16:56.266298Z","shell.execute_reply":"2024-08-24T23:16:56.266316Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cleaned_data = [re.sub(r'\\.$', '', item) for item in results_lp]","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.268641Z","iopub.status.idle":"2024-08-24T23:16:56.269200Z","shell.execute_reply.started":"2024-08-24T23:16:56.268924Z","shell.execute_reply":"2024-08-24T23:16:56.268952Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(cleaned_data)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.270312Z","iopub.status.idle":"2024-08-24T23:16:56.270800Z","shell.execute_reply.started":"2024-08-24T23:16:56.270575Z","shell.execute_reply":"2024-08-24T23:16:56.270600Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Accuracy\ncount = 0\nfor x,y in zip(results_lp,Sample_Line_Intersecting['groundtruth']):\n    if (x=='Yes' and y!='0') or (x=='No' and y==0):\n        count+=1\nprint(\"Accuracy is \", count/len(results_lp)*100)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.272030Z","iopub.status.idle":"2024-08-24T23:16:56.272530Z","shell.execute_reply.started":"2024-08-24T23:16:56.272239Z","shell.execute_reply":"2024-08-24T23:16:56.272264Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Circled Letters","metadata":{}},{"cell_type":"code","source":"Sample_Circled_Letter = ds['Circled_Letter'].select(range(100))\nSample_Circled_Letter","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.274138Z","iopub.status.idle":"2024-08-24T23:16:56.274705Z","shell.execute_reply.started":"2024-08-24T23:16:56.274400Z","shell.execute_reply":"2024-08-24T23:16:56.274444Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def generate_circled_letters(client,dataset):\n    results = []\n    model_name = \"gpt-4o-mini\"\n    \n    for sample in tqdm(dataset):\n        image_url = get_image_url(sample['image'])\n        prompt = sample['prompt'] + \"Answer just a single character.\"\n        \n        messages=[{\n            \"role\": \"user\",\n            \"content\": [\n                {\"type\": \"text\", \"text\": f\"{prompt}\"},\n                {\"type\": \"image_url\", \"image_url\": {\"url\": f\"{image_url}\"},}\n                       ]\n                    }\n                 ]\n        response = client.chat.completions.create(model = model_name,messages = messages,seed = 300,max_tokens = 100)\n        response = response.choices[0].message.content\n\n        #print(response)\n        results.append(response)\n        \n    return results","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.275936Z","iopub.status.idle":"2024-08-24T23:16:56.276497Z","shell.execute_reply.started":"2024-08-24T23:16:56.276200Z","shell.execute_reply":"2024-08-24T23:16:56.276227Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"results_cl = generate_circled_letters(client,Sample_Circled_Letter)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.277804Z","iopub.status.idle":"2024-08-24T23:16:56.278360Z","shell.execute_reply.started":"2024-08-24T23:16:56.278086Z","shell.execute_reply":"2024-08-24T23:16:56.278112Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(results_cl)","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.280404Z","iopub.status.idle":"2024-08-24T23:16:56.280994Z","shell.execute_reply.started":"2024-08-24T23:16:56.280710Z","shell.execute_reply":"2024-08-24T23:16:56.280748Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(\"Accurcy is = \", get_accuracy(results_cl,Sample_Circled_Letter['groundtruth']))","metadata":{"execution":{"iopub.status.busy":"2024-08-24T23:16:56.282419Z","iopub.status.idle":"2024-08-24T23:16:56.283295Z","shell.execute_reply.started":"2024-08-24T23:16:56.282721Z","shell.execute_reply":"2024-08-24T23:16:56.282750Z"},"trusted":true},"execution_count":null,"outputs":[]}]}